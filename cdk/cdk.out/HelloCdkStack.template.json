{
 "Resources": {
  "ASGInstanceSecurityGroup0525485D": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "HelloCdkStack/ASG/InstanceSecurityGroup",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "HelloCdkStack/ASG"
     }
    ],
    "VpcId": "vpc-0bcdf49cb26831a94"
   },
   "Metadata": {
    "aws:cdk:path": "HelloCdkStack/ASG/InstanceSecurityGroup/Resource"
   }
  },
  "ASGInstanceSecurityGroupfromHelloCdkStackLBSecurityGroupD21EA9DA8092E1A5D3": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Load balancer to target",
    "FromPort": 80,
    "GroupId": {
     "Fn::GetAtt": [
      "ASGInstanceSecurityGroup0525485D",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "LBSecurityGroup8A41EA2B",
      "GroupId"
     ]
    },
    "ToPort": 80
   },
   "Metadata": {
    "aws:cdk:path": "HelloCdkStack/ASG/InstanceSecurityGroup/from HelloCdkStackLBSecurityGroupD21EA9DA:80"
   }
  },
  "ASGInstanceProfile0A2834D7": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     "LabRole"
    ]
   },
   "Metadata": {
    "aws:cdk:path": "HelloCdkStack/ASG/InstanceProfile"
   }
  },
  "ASGLaunchTemplate0CA92847": {
   "Type": "AWS::EC2::LaunchTemplate",
   "Properties": {
    "LaunchTemplateData": {
     "IamInstanceProfile": {
      "Arn": {
       "Fn::GetAtt": [
        "ASGInstanceProfile0A2834D7",
        "Arn"
       ]
      }
     },
     "ImageId": {
      "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61x8664C96584B6F00A464EAD1953AFF4B05118Parameter"
     },
     "InstanceType": "t2.micro",
     "KeyName": "vockey",
     "Monitoring": {
      "Enabled": false
     },
     "SecurityGroupIds": [
      {
       "Fn::GetAtt": [
        "ASGInstanceSecurityGroup0525485D",
        "GroupId"
       ]
      }
     ],
     "TagSpecifications": [
      {
       "ResourceType": "instance",
       "Tags": [
        {
         "Key": "Name",
         "Value": "HelloCdkStack/ASG/LaunchTemplate"
        }
       ]
      },
      {
       "ResourceType": "volume",
       "Tags": [
        {
         "Key": "Name",
         "Value": "HelloCdkStack/ASG/LaunchTemplate"
        }
       ]
      }
     ],
     "UserData": {
      "Fn::Base64": "#!/bin/bash\nyum update -y\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"\n[ -s \"$NVM_DIR/bash_completion\" ] && . \"$NVM_DIR/bash_completion\"\nnvm install node\ncd /home/ec2-user\nmkdir app\ncd app\nnpm init -y\nnpm install express\necho \"\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\napp.listen(80, () => {\n  console.log('Server is running on http://localhost:80');\n});\" >> index.js\nnode index.js"
     }
    },
    "TagSpecifications": [
     {
      "ResourceType": "launch-template",
      "Tags": [
       {
        "Key": "Name",
        "Value": "HelloCdkStack/ASG/LaunchTemplate"
       }
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "HelloCdkStack/ASG/LaunchTemplate/Resource"
   }
  },
  "ASG46ED3070": {
   "Type": "AWS::AutoScaling::AutoScalingGroup",
   "Properties": {
    "LaunchTemplate": {
     "LaunchTemplateId": {
      "Ref": "ASGLaunchTemplate0CA92847"
     },
     "Version": {
      "Fn::GetAtt": [
       "ASGLaunchTemplate0CA92847",
       "LatestVersionNumber"
      ]
     }
    },
    "MaxSize": "1",
    "MinSize": "1",
    "Tags": [
     {
      "Key": "Name",
      "PropagateAtLaunch": true,
      "Value": "HelloCdkStack/ASG"
     }
    ],
    "TargetGroupARNs": [
     {
      "Ref": "LBListenerTargetGroupF04FCF6D"
     }
    ],
    "VPCZoneIdentifier": [
     "subnet-07983b5638918e2db",
     "subnet-0d20c5324dd677ac5"
    ]
   },
   "UpdatePolicy": {
    "AutoScalingScheduledAction": {
     "IgnoreUnmodifiedGroupSizeProperties": true
    }
   },
   "Metadata": {
    "aws:cdk:path": "HelloCdkStack/ASG/ASG"
   }
  },
  "ASGScalingPolicyAModestLoadC5714E5A": {
   "Type": "AWS::AutoScaling::ScalingPolicy",
   "Properties": {
    "AutoScalingGroupName": {
     "Ref": "ASG46ED3070"
    },
    "PolicyType": "TargetTrackingScaling",
    "TargetTrackingConfiguration": {
     "PredefinedMetricSpecification": {
      "PredefinedMetricType": "ALBRequestCountPerTarget",
      "ResourceLabel": {
       "Fn::Join": [
        "",
        [
         {
          "Fn::Select": [
           1,
           {
            "Fn::Split": [
             "/",
             {
              "Ref": "LBListener49E825B4"
             }
            ]
           }
          ]
         },
         "/",
         {
          "Fn::Select": [
           2,
           {
            "Fn::Split": [
             "/",
             {
              "Ref": "LBListener49E825B4"
             }
            ]
           }
          ]
         },
         "/",
         {
          "Fn::Select": [
           3,
           {
            "Fn::Split": [
             "/",
             {
              "Ref": "LBListener49E825B4"
             }
            ]
           }
          ]
         },
         "/",
         {
          "Fn::GetAtt": [
           "LBListenerTargetGroupF04FCF6D",
           "TargetGroupFullName"
          ]
         }
        ]
       ]
      }
     },
     "TargetValue": 60
    }
   },
   "DependsOn": [
    "LBListener49E825B4",
    "LBListenerTargetGroupF04FCF6D"
   ],
   "Metadata": {
    "aws:cdk:path": "HelloCdkStack/ASG/ScalingPolicyAModestLoad/Resource"
   }
  },
  "LB8A12904C": {
   "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
   "Properties": {
    "LoadBalancerAttributes": [
     {
      "Key": "deletion_protection.enabled",
      "Value": "false"
     }
    ],
    "Scheme": "internet-facing",
    "SecurityGroups": [
     {
      "Fn::GetAtt": [
       "LBSecurityGroup8A41EA2B",
       "GroupId"
      ]
     }
    ],
    "Subnets": [
     "subnet-0568758c661672e13",
     "subnet-0a3507c74a67f372f"
    ],
    "Type": "application"
   },
   "Metadata": {
    "aws:cdk:path": "HelloCdkStack/LB/Resource"
   }
  },
  "LBSecurityGroup8A41EA2B": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Automatically created Security Group for ELB HelloCdkStackLB966DDD80",
    "SecurityGroupIngress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow from anyone on port 80",
      "FromPort": 80,
      "IpProtocol": "tcp",
      "ToPort": 80
     }
    ],
    "VpcId": "vpc-0bcdf49cb26831a94"
   },
   "Metadata": {
    "aws:cdk:path": "HelloCdkStack/LB/SecurityGroup/Resource"
   }
  },
  "LBSecurityGrouptoHelloCdkStackASGInstanceSecurityGroupB8AFECB680937DEBD4": {
   "Type": "AWS::EC2::SecurityGroupEgress",
   "Properties": {
    "Description": "Load balancer to target",
    "DestinationSecurityGroupId": {
     "Fn::GetAtt": [
      "ASGInstanceSecurityGroup0525485D",
      "GroupId"
     ]
    },
    "FromPort": 80,
    "GroupId": {
     "Fn::GetAtt": [
      "LBSecurityGroup8A41EA2B",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "ToPort": 80
   },
   "Metadata": {
    "aws:cdk:path": "HelloCdkStack/LB/SecurityGroup/to HelloCdkStackASGInstanceSecurityGroupB8AFECB6:80"
   }
  },
  "LBListener49E825B4": {
   "Type": "AWS::ElasticLoadBalancingV2::Listener",
   "Properties": {
    "DefaultActions": [
     {
      "TargetGroupArn": {
       "Ref": "LBListenerTargetGroupF04FCF6D"
      },
      "Type": "forward"
     }
    ],
    "LoadBalancerArn": {
     "Ref": "LB8A12904C"
    },
    "Port": 80,
    "Protocol": "HTTP"
   },
   "Metadata": {
    "aws:cdk:path": "HelloCdkStack/LB/Listener/Resource"
   }
  },
  "LBListenerTargetGroupF04FCF6D": {
   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
   "Properties": {
    "Port": 80,
    "Protocol": "HTTP",
    "TargetGroupAttributes": [
     {
      "Key": "stickiness.enabled",
      "Value": "false"
     }
    ],
    "TargetType": "instance",
    "VpcId": "vpc-0bcdf49cb26831a94"
   },
   "Metadata": {
    "aws:cdk:path": "HelloCdkStack/LB/Listener/TargetGroup/Resource"
   }
  },
  "MyFirstTopic0ED1F8A4": {
   "Type": "AWS::SNS::Topic",
   "Metadata": {
    "aws:cdk:path": "HelloCdkStack/MyFirstTopic/Resource"
   }
  },
  "MyFirstTopicPolicy629C8FBA": {
   "Type": "AWS::SNS::TopicPolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sns:Publish",
       "Condition": {
        "ArnLike": {
         "aws:SourceArn": {
          "Fn::GetAtt": [
           "MyFirstBucketB8884501",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "s3.amazonaws.com"
       },
       "Resource": {
        "Ref": "MyFirstTopic0ED1F8A4"
       },
       "Sid": "0"
      }
     ],
     "Version": "2012-10-17"
    },
    "Topics": [
     {
      "Ref": "MyFirstTopic0ED1F8A4"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "HelloCdkStack/MyFirstTopic/Policy/Resource"
   }
  },
  "MyFirstBucketB8884501": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "HelloCdkStack/MyFirstBucket/Resource"
   }
  },
  "MyFirstBucketNotifications7338EF1F": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "MyFirstBucketB8884501"
    },
    "NotificationConfiguration": {
     "TopicConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "TopicArn": {
        "Ref": "MyFirstTopic0ED1F8A4"
       }
      }
     ]
    },
    "Managed": true
   },
   "DependsOn": [
    "MyFirstTopicPolicy629C8FBA",
    "MyFirstTopic0ED1F8A4"
   ],
   "Metadata": {
    "aws:cdk:path": "HelloCdkStack/MyFirstBucket/Notifications/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def with_id(n):\n    n['Id'] = f\"{stack_id}-{hash(json.dumps(n, sort_keys=True))}\"\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        ids = [with_id(n) for n in old.get(t, [])]\n        old_incoming_ids = [n['Id'] for n in ids]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'] in old_incoming_ids]\n    elif request_type == 'Delete':\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
    },
    "Handler": "index.handler",
    "Role": "arn:aws:iam::492027459158:role/LabRole",
    "Runtime": "python3.11",
    "Timeout": 300
   },
   "Metadata": {
    "aws:cdk:path": "HelloCdkStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/31R227CMAz9Ft5DBmX7AEDThIQ0BH2fjGuKaepUuYBQ1X+f2gIrQtpLcm52EifR0/eZnozg4seYFWPDe13vAmChtuRtdEgKLv6nhhisRzAsua7nMdhdT76cjZVaHuRFS8HlFFIHWLDkN2tjDeO1zT8JjSJMdL0jjI7D9dH0f2EluSPv1Rqi4DGlsjIQqI29Kk+Fn11doxhKvTzISnwAQdo4e2BDigz4wGgsZHswIMiSnxNdz6vKMEJgK2sL2aLzyHUHDvkwxz6Q3DJ3PPD7IT2eN6CN8uJ1ndqKsbM60K1/QxzQRvmZrhcRCwqt1aOmafEGHJQU+mt8x1DFLnL/4UaJzUif/Ns5mejph56OTp557KIELklv+/0XVASXOywCAAA="
   },
   "Metadata": {
    "aws:cdk:path": "HelloCdkStack/CDKMetadata/Default"
   }
  }
 },
 "Parameters": {
  "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61x8664C96584B6F00A464EAD1953AFF4B05118Parameter": {
   "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
   "Default": "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"
  },
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Outputs": {
  "LoadBalancerDNS": {
   "Value": {
    "Fn::GetAtt": [
     "LB8A12904C",
     "DNSName"
    ]
   }
  },
  "BucketName": {
   "Value": {
    "Ref": "MyFirstBucketB8884501"
   }
  },
  "TopicArn": {
   "Value": {
    "Ref": "MyFirstTopic0ED1F8A4"
   }
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}